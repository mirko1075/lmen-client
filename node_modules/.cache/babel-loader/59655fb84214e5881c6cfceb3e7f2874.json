{"ast":null,"code":"import axios from \"axios\"; // THIS IS AN EXAMPLE THAT YOU CAN USE\n// TO CREATE A SERVICE FOR YOUR AXIOS CALLS\n\nclass ApiService {\n  constructor() {\n    this.getAll = () => {\n      const pr = this.api.get(\"/products\");\n      return pr;\n    };\n\n    this.getOne = id => {\n      const pr = this.api.get(`/products/${id}`);\n      return pr;\n    };\n\n    this.create = data => {\n      const pr = this.api.post(`/example/${id}`, data);\n      return pr;\n    };\n\n    this.deleteOne = id => {\n      const pr = this.api.delete(`/example/${id}`);\n      return pr;\n    };\n\n    // this.api  is a reusable base of the request containing the base url (baseURL)\n    // of the API and the options ( `withCredentials: true` )\n    this.api = axios.create({\n      baseURL: \"http://localhost:5000/api\",\n      withCredentials: true\n    });\n  }\n\n} // Create instance (object) containing all axios calls as methods\n\n\nconst apiService = new ApiService();\nexport default apiService; // Service is a set of methods abstracted and placed into a class, out of which we create one instance.\n// In the above case, all axios request calls are abstracted into methods.","map":{"version":3,"sources":["/Users/mirkosiddi/Documents/Bootcamp-2020/Projects/lmen-confeccion/client/src/lib/api-service.js"],"names":["axios","ApiService","constructor","getAll","pr","api","get","getOne","id","create","data","post","deleteOne","delete","baseURL","withCredentials","apiService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AACA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,GAAG;AAAA,SASdC,MATc,GASL,MAAM;AACb,YAAMC,EAAE,GAAG,KAAKC,GAAL,CAASC,GAAT,CAAa,WAAb,CAAX;AAEA,aAAOF,EAAP;AACD,KAba;;AAAA,SAedG,MAfc,GAeJC,EAAD,IAAQ;AACf,YAAMJ,EAAE,GAAG,KAAKC,GAAL,CAASC,GAAT,CAAc,aAAYE,EAAG,EAA7B,CAAX;AAEA,aAAOJ,EAAP;AACD,KAnBa;;AAAA,SAqBdK,MArBc,GAqBJC,IAAD,IAAU;AACjB,YAAMN,EAAE,GAAG,KAAKC,GAAL,CAASM,IAAT,CAAe,YAAWH,EAAG,EAA7B,EAAgCE,IAAhC,CAAX;AAEA,aAAON,EAAP;AACD,KAzBa;;AAAA,SA2BdQ,SA3Bc,GA2BDJ,EAAD,IAAQ;AAClB,YAAMJ,EAAE,GAAG,KAAKC,GAAL,CAASQ,MAAT,CAAiB,YAAWL,EAAG,EAA/B,CAAX;AAEA,aAAOJ,EAAP;AACD,KA/Ba;;AACZ;AACA;AACA,SAAKC,GAAL,GAAWL,KAAK,CAACS,MAAN,CAAa;AACtBK,MAAAA,OAAO,EAAE,2BADa;AAEtBC,MAAAA,eAAe,EAAE;AAFK,KAAb,CAAX;AAID;;AARc,C,CAmCjB;;;AACA,MAAMC,UAAU,GAAG,IAAIf,UAAJ,EAAnB;AAEA,eAAee,UAAf,C,CAEA;AACA","sourcesContent":["import axios from \"axios\";\n\n// THIS IS AN EXAMPLE THAT YOU CAN USE\n// TO CREATE A SERVICE FOR YOUR AXIOS CALLS\nclass ApiService {\n  constructor() {\n    // this.api  is a reusable base of the request containing the base url (baseURL)\n    // of the API and the options ( `withCredentials: true` )\n    this.api = axios.create({\n      baseURL: \"http://localhost:5000/api\",\n      withCredentials: true,\n    });\n  }\n\n  getAll = () => {\n    const pr = this.api.get(\"/products\");\n\n    return pr;\n  };\n\n  getOne = (id) => {\n    const pr = this.api.get(`/products/${id}`);\n\n    return pr;\n  };\n\n  create = (data) => {\n    const pr = this.api.post(`/example/${id}`, data);\n\n    return pr;\n  };\n\n  deleteOne = (id) => {\n    const pr = this.api.delete(`/example/${id}`);\n\n    return pr;\n  };\n}\n\n// Create instance (object) containing all axios calls as methods\nconst apiService = new ApiService();\n\nexport default apiService;\n\n// Service is a set of methods abstracted and placed into a class, out of which we create one instance.\n// In the above case, all axios request calls are abstracted into methods.\n"]},"metadata":{},"sourceType":"module"}