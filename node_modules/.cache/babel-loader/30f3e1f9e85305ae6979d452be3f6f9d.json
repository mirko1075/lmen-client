{"ast":null,"code":"import axios from \"axios\"; //Connection to DB parameters\n\nconst API_BASE_URL = process.env.API_BASE_URL.toString();\nconst API_PORT = process.env.API_PORT.toString();\n\nclass ApiService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: \"http://\" + API_BASE_URL + \":\" + API_PORT + \"/api\"\n    });\n  }\n\n  getAll() {\n    const pr = this.api.get(\"/products\").then(response => {\n      return response.data;\n    }).catch(err => {\n      console.log(err);\n    }); // .then(({ data }) => data); // Shorter way of `.then((response) => response.data);`\n\n    return pr;\n  }\n\n  getOne(productId) {\n    const pr = this.api.get(\"/products/\" + productId).then(response => response.data);\n    return pr;\n  }\n\n}\n\nconst apiService = new ApiService();\nexport default apiService; // Service is a set of methods abstracted and placed into a class, out of which we create one instance.\n// In the above case, all axios request calls are abstracted into methods.","map":{"version":3,"sources":["/Users/mirkosiddi/Documents/Bootcamp-2020/Projects/lmen-confeccion/client/src/lib/api-service.js"],"names":["axios","API_BASE_URL","process","env","toString","API_PORT","ApiService","constructor","api","create","baseURL","getAll","pr","get","then","response","data","catch","err","console","log","getOne","productId","apiService"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYF,YAAZ,CAAyBG,QAAzB,EAArB;AACA,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAR,CAAYE,QAAZ,CAAqBD,QAArB,EAAjB;;AAEA,MAAME,UAAN,CAAiB;AACfC,EAAAA,WAAW,GAAG;AACZ,SAAKC,GAAL,GAAWR,KAAK,CAACS,MAAN,CAAa;AACtBC,MAAAA,OAAO,EAAE,YAAYT,YAAZ,GAA2B,GAA3B,GAAiCI,QAAjC,GAA4C;AAD/B,KAAb,CAAX;AAGD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAMC,EAAE,GAAG,KAAKJ,GAAL,CACRK,GADQ,CACJ,WADI,EAERC,IAFQ,CAEFC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACC,IAAhB;AACD,KAJQ,EAKRC,KALQ,CAKDC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAPQ,CAAX,CADO,CASP;;AAEA,WAAON,EAAP;AACD;;AAEDS,EAAAA,MAAM,CAACC,SAAD,EAAY;AAChB,UAAMV,EAAE,GAAG,KAAKJ,GAAL,CACRK,GADQ,CACJ,eAAeS,SADX,EAERR,IAFQ,CAEFC,QAAD,IAAcA,QAAQ,CAACC,IAFpB,CAAX;AAGA,WAAOJ,EAAP;AACD;;AA1Bc;;AA6BjB,MAAMW,UAAU,GAAG,IAAIjB,UAAJ,EAAnB;AAEA,eAAeiB,UAAf,C,CAEA;AACA","sourcesContent":["import axios from \"axios\";\n//Connection to DB parameters\nconst API_BASE_URL = process.env.API_BASE_URL.toString();\nconst API_PORT = process.env.API_PORT.toString();\n\nclass ApiService {\n  constructor() {\n    this.api = axios.create({\n      baseURL: \"http://\" + API_BASE_URL + \":\" + API_PORT + \"/api\",\n    });\n  }\n\n  getAll() {\n    const pr = this.api\n      .get(\"/products\")\n      .then((response) => {\n        return response.data;\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    // .then(({ data }) => data); // Shorter way of `.then((response) => response.data);`\n\n    return pr;\n  }\n\n  getOne(productId) {\n    const pr = this.api\n      .get(\"/products/\" + productId)\n      .then((response) => response.data);\n    return pr;\n  }\n}\n\nconst apiService = new ApiService();\n\nexport default apiService;\n\n// Service is a set of methods abstracted and placed into a class, out of which we create one instance.\n// In the above case, all axios request calls are abstracted into methods.\n"]},"metadata":{},"sourceType":"module"}